
#include <stdlib.h>
#include <stdio.h>

#define GL_GLEXT_PROTOTYPES

//#include "GL/glew.h"
#include "GL/gl.h"
#include "GL/glut.h"
#include "GL/glu.h"

#define V_SHADER "v.glsl"
#define F_SHADER "f.glsl"

// Load a file as a null-terminated string.
char* load(const char* filename) {
    FILE* f = fopen(filename, "r");
    if (!f) {
        return NULL;
    }
    fseek(f, 0, SEEK_END);

    long size = ftell(f);
    char* buffer = malloc(size+1);
    if (!buffer) {
        return NULL;
    }

    rewind(f);
    fread(buffer, size, 1, f);
    fclose(f);

    buffer[size] = '\0';
    return buffer;
}

typedef struct Attributes Attributes;
struct Attributes {
    float x, y;
};

const Attributes vertices[3] =
    { {-1.0f, -1.0f }
    , { 1.0f, -1.0f }
    , { 1.0f,  1.0f }
};

GLuint gen_buffer(Attributes* attrs) {
    GLuint buffer;
    glGenBuffers(1, &buffer);
    glBindBuffer(GL_ARRAY_BUFFER, buffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(attrs), attrs, GL_STATIC_DRAW);
    return buffer;
}


GLuint gen_shader(const char *text, int type) {
    // 'type' should be either GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
    GLuint shader = glCreateShader(type);
    glShaderSource(shader, 1, &text, NULL);
    // TODO: include error checking.
    glCompileShader(shader);
    // Remember that GL objects are just uint identifiers.
    // Everything stays on the graphics card.
    // Returning the 'shader' is just returning its handle.
    return shader;
}


GLuint gen_program(GLuint vs, GLuint fs) {
    GLuint program = glCreateProgram();
    glAttachShader(program, vs);
    glAttachShader(program, fs);
    glLinkProgram(program);
    return program;
}


void update_display(void) {
    // How do I pass in variables?
    puts("Update.");
    glClear(GL_COLOR_BUFFER_BIT);
    //glUseProgram(program);
    //glDrawArrays(GL_TRIANGLES, 0, 3);
    glutSwapBuffers();
}


void idle_display(void) {
}


void key_press(unsigned char key, int x, int y) {
    puts("Pressed!");
    glutLeaveMainLoop();
}


int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitWindowSize(300, 200);
    glutInitWindowPosition(50, 50);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);

    glutCreateWindow("Hello There");
    glutDisplayFunc(&update_display);
    glutIdleFunc(&idle_display);
    glutKeyboardFunc(&key_press);

    /*
    glewInit();
    if(!GLEW_VERSION_2_0) {
        fprintf(stderr, "OpenGL 2.0 is not available.\n");
        return 1;
    }
    */

    printf("OpenGL v%s\n", glGetString(GL_VERSION));

    GLuint vs = gen_shader(load(V_SHADER), GL_VERTEX_SHADER);
    GLuint fs = gen_shader(load(F_SHADER), GL_FRAGMENT_SHADER);
    GLuint program = gen_program(vs, fs);

    glutMainLoop();
    return 0;
}
